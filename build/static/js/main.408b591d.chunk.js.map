{"version":3,"sources":["_Logic/Data/MySQLTemperaturaService.ts","_Presentation/Components/BaseDatosMaterial.tsx","_Logic/_Common/dataNames.ts","App.js","reportWebVitals.js","index.js"],"names":["MySQLTemperaturaService","getAll","Promise","resolve","reject","a","fetch","response","console","log","StyledTableCell","withStyles","theme","createStyles","head","backgroundColor","palette","common","black","color","white","body","fontSize","TableCell","StyledTableRow","root","action","hover","TableRow","useStyles","makeStyles","table","minWidth","BaseDatosMaterial","props","classes","TableContainer","component","Paper","Table","className","aria-label","TableHead","align","TableBody","itemsMaterial","map","row","scope","id","temperature","App","useState","items","setItems","useEffect","then","res","catch","err","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAGaA,EAAb,sCAOWC,OAAS,kBAA+B,IAAIC,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,eAAAC,EAAA,+EAE9BC,MAAM,wBAFwB,OAE/CC,EAF+C,OAGnDC,QAAQC,IAAIF,GACZJ,IAJmD,gDAMnDC,EAAO,EAAD,IAN6C,yDAAZ,2D,+ECQ7CM,EAAkBC,aAAW,SAACC,GAAD,OACjCC,YAAa,CACXC,KAAM,CACJC,gBAAiBH,EAAMI,QAAQC,OAAOC,MACtCC,MAAOP,EAAMI,QAAQC,OAAOG,OAE9BC,KAAM,CACJC,SAAU,QAPQX,CAUtBY,KAEIC,EAAiBb,aAAW,SAACC,GAAD,OAChCC,YAAa,CACXY,KAAM,CACJ,qBAAsB,CACpBV,gBAAiBH,EAAMI,QAAQU,OAAOC,YAJvBhB,CAQrBiB,KAEIC,EAAYC,YAAW,CAC3BC,MAAO,CACLC,SAAU,OAIP,SAASC,EAAkBC,GAChC,IAAMC,EAAUN,IAEhB,OADArB,QAAQC,IAAIyB,GAEV,cAACE,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACE,eAACC,EAAA,EAAD,CAAOC,UAAWL,EAAQJ,MAAOU,aAAW,mBAA5C,UACE,cAACC,EAAA,EAAD,UACE,eAACd,EAAA,EAAD,WACE,cAAClB,EAAD,UCrDU,ODsDV,cAACA,EAAD,CAAiBiC,MAAM,QAAvB,SCrDY,qBDwDhB,cAACC,EAAA,EAAD,UACGV,EAAMW,cAAcC,KAAI,SAACC,GAAD,OACvB,eAACvB,EAAD,WACE,cAACd,EAAD,CAAiB2B,UAAU,KAAKW,MAAM,MAAtC,SACGD,EAAIE,KAEP,cAACvC,EAAD,CAAiBiC,MAAM,QAAvB,SAAgCI,EAAIG,gBAJjBH,EAAIE,cEvCtBE,MAhBf,WAAgB,IAAD,EACYC,mBAAS,IADrB,mBACNC,EADM,KACAC,EADA,KASb,OAPAC,qBAAU,YACK,IAAIvD,GACVC,SACNuD,MAAK,SAAAC,GAAQjD,QAAQC,IAAIgD,GAAMH,EAAS,OACxCI,OAAM,SAAAC,GAAG,OAAInD,QAAQC,IAAIkD,QAE1B,IAEA,qBAAKnB,UAAU,MAAf,SACE,cAACP,EAAD,CAAmBY,cAAeQ,OCJzBO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.408b591d.chunk.js","sourcesContent":["import { ITemperatura } from \"../Models/ITemperatura\";\r\nimport { ITemperaturaServices } from \"../Services/ITemperaturaServices\";\r\n\r\nexport class MySQLTemperaturaService implements ITemperaturaServices {\r\n    /**\r\n     *A modo de prueba de concepto voy a implementar ambas soluciones pero no sé cuál será la óptima\r\n     *Voy a acceder a bbdd mediante un conector aquí a pelo (fijo que se puede) y usando las azure functions\r\n     *(que pa eso están).\r\n     */\r\n\r\n    public getAll = (): Promise<ITemperatura[]> => new Promise(async (resolve, reject) => {\r\n        try {\r\n            let response = await fetch(\"/api/function_prueba\");\r\n            console.log(response);\r\n            resolve();\r\n        } catch (error) {\r\n            reject(error);\r\n        }\r\n    })\r\n\r\n}","import React from 'react';\r\nimport { withStyles, Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { ITemperatura } from \"../../_Logic/Models/ITemperatura\"\r\n\r\nimport * as names from \"../../_Logic/_Common/dataNames\"\r\n\r\ninterface IBaseDatosMaterialProps {\r\n  itemsMaterial: ITemperatura[];\r\n}\r\n\r\n\r\nconst StyledTableCell = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  }),\r\n)(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      '&:nth-of-type(odd)': {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  }),\r\n)(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 700,\r\n  },\r\n});\r\n\r\nexport function BaseDatosMaterial(props:IBaseDatosMaterialProps) {\r\n  const classes = useStyles();\r\n  console.log(props);\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"customized table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell>{names.idName}</StyledTableCell>\r\n            <StyledTableCell align=\"right\">{names.tempName}</StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {props.itemsMaterial.map((row) => (\r\n            <StyledTableRow key={row.id}>\r\n              <StyledTableCell component=\"th\" scope=\"row\">\r\n                {row.id}\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"right\">{row.temperature}</StyledTableCell>\r\n            </StyledTableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","//Nombres de columnas\r\nexport const idName = \"Id\";\r\nexport const tempName = \"Temperatura\";","import './App.css';\nimport { useEffect,useState } from 'react';\nimport { MySQLTemperaturaService } from \"./_Logic/Data/MySQLTemperaturaService\"\nimport {BaseDatosMaterial} from \"./_Presentation/Components/BaseDatosMaterial\"\n\nfunction App() {\n  const [items,setItems] = useState([]);\n  useEffect(() => {\n    var prueba = new MySQLTemperaturaService();\n    prueba.getAll()\n    .then(res => {console.log(res); setItems([])})\n    .catch(err => console.log(err))\n\n  },[]);\n  return (\n    <div className=\"App\">\n      <BaseDatosMaterial itemsMaterial={items}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}